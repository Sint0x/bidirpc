в папке bidi расположены тестовые прмиеры реализации grpc сервера и тестовый proto файл.

в папке models расположенны модели для валидации обязательных и опциональных аргументов.
    создан унаследованный класс, который применяет ко всем полям правило: "" = None, так как grpc в питоне автоматически добавляет аргумент с "" даже если он не был передан

в папке proto расположнны сгенерированные файлы

в папке src: bidi_server.py - grpc сервис, с двумя функциями:

    функция GetStreamMessages имеет свой стрим по которому присылаются данные, оторые в свою очередь валидируются и сохраняются в кеш.
    данные с запроса по прото файлу. примечание: sessionId клиент отправляет сам(не создается на сервере)
    данные на ответ:
        на каждые данные будет либо ошибка либо успех.
    стрим закрывается при выходе из функции.

    функция GetSessionData:
    имеет свой стрим, по которому принимает sessionId и по нему достает из кеша обьект с всеми message что были в рамках этой сессии.
    данные с запроса:
        sessionId которое клиент отправляет сам(не создается на сервере).
    данные на ответ:
        на каждые данные будет либо ошибка либо успех.
        если сессии нет то вернется ошибка 404(?) с соответствующим описанием
    
    session_cache.py : модуль для работы с aiocache
        имеет 3 функции:
            взять обьект сесси по айди сессии(если нету, то создает обьекст с пустым списком messages)
            добавить message в обьект по sessionId(если нету, то создает обьекст с пустым списком messages)
            проверка на существования обьекта по sessionId(возвращает булево)
    

в папке test располагается proto-файл(-ы).

в папке tests находятся тестовые клиенты grpc для тестирование работоспособности сервера.
    запуск как питон файла: cd tests , py filename.py . сначала к запуску идет файл get_stream_message_test_client для создания сессий, затем уж get_session_data_test_client
        ожидания от тестов:  Success: 1 Success: 1 Success: 1 Success: 1......

Запуск сервера:
    файла main.py как питон файл. py main.py .


полезное:
    1. Использование виртуального окружения
    Для работы над проектом используйте venv, чтобы управлять зависимостями и изолировать их:
            ◦ Создайте виртуальное окружение:
    bash
    Копировать код
    python -m venv venv
            ◦ Активируйте его:
    bash
    Копировать код
    # Windows
    venv\Scripts\activate
    # macOS/Linux
    source venv/bin/activate
            ◦ Установите зависимости из файла req.txt, находящегося в папке /bidi:
    bash
    Копировать код
    pip install -r /bidi/req.txt
